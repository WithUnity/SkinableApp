<!-- Copyright 2018-2021 Robin Murison

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.-->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    x:Name="BaseSkin">
    <Style TargetType="TextBlock">
        <Setter Property="FontSize" Value="12" />
    </Style>

    <!-- AGENT IMAGE BORDER STYLE -->
    <Style x:Key="StyleAgentImageBorder_Base">
        <Setter Property="Border.BorderBrush" Value="Black" />
        <Setter Property="Border.BorderThickness" Value="2" />
        <Setter Property="Border.Margin" Value="6" />
    </Style>

    <!-- The Blue and Black skins do not provide a Style for the Agent Image Border
         so this one acts as the default Style for both of them. -->
    <Style x:Key="StyleAgentImageBorder" BasedOn="{StaticResource StyleAgentImageBorder_Base}" />    
      
    <!-- CONTENT AREA STYLE -->
    <Style x:Key="StyleContentArea_Base">
        <Setter Property="Border.BorderThickness" Value="1" />
        <Setter Property="Border.CornerRadius" Value="10" />
        <Setter Property="Border.Margin" Value="12" />
    </Style>

    <!-- CONTENT AREA HEADER STYLE -->
    <Style x:Key="StyleContentAreaHeader_Base">
        <Setter Property="Border.CornerRadius" Value="10" />
        <Setter Property="Control.Height" Value="40" />
        <Setter Property="Control.Margin" Value="1,1,1,6" />
        <Setter Property="Border.Background" Value="{StaticResource ContentAreaHeaderBackgroundBrush}" />
    </Style>

    <!-- INFO TEXT STYLE -->
    <Style x:Key="StyleInfoText">
        <Setter Property="TextBlock.FontWeight" Value="Bold" />
        <Setter Property="TextBlock.Foreground" Value="{StaticResource ResourceKey=InfoTextBrush}"/>
        <Setter Property="TextBlock.Margin" Value="0,0,0,4" />
        <Setter Property="TextBlock.TextTrimming" Value="CharacterEllipsis" />
        <Style.Triggers>
            <!-- Check if the style is applied to a TextBlock that is part of a ListBoxItem.
                 If so, check if item is selected and has focus.  When that is true, set the foreground to white.-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBoxItem}}, Path=IsSelected}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBoxItem}}, Path=IsFocused}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="TextElement.Foreground" Value="{StaticResource ResourceKey=SelectedInfoTextBrush}" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

     <!-- DATATEMPLATE FOR LISTBOXITEM -->
    <DataTemplate x:Key="AgentListItemTemplate">
        <StackPanel Margin="4,8" Orientation="Horizontal">
            <Image Height="20" Width="20" Margin="0,0,4,0" Source="..\Icons\agent.ico" VerticalAlignment="Center" />
            <!-- Reset the Margin property on each TextBlock so that the styleInfoText's Margin setting is ignored. -->
            <TextBlock Margin="0"
                       Foreground="{DynamicResource ResourceKey=InfoTextBrush}"
                       Style="{DynamicResource StyleInfoText}"
                       Text="{Binding XPath=Name/Last}" />
            <TextBlock Margin="0"
                       Foreground="{DynamicResource ResourceKey=InfoTextBrush}"
                       Style="{DynamicResource StyleInfoText}"
                       Text=", " />
            <TextBlock Margin="0"
                       Foreground="{DynamicResource ResourceKey=InfoTextBrush}"
                       Style="{DynamicResource StyleInfoText}"
                       Text="{Binding XPath=Name/First}" />
        </StackPanel>
    </DataTemplate>

    <!-- Background Style -->
    <Style x:Key="StyleBackground">
        <Setter Property="Control.Background"
                Value="{DynamicResource WindowBackgroundBrush}"/>
    </Style>
</ResourceDictionary>